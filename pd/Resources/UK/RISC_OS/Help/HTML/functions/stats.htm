<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">

    <!-- This Source Code Form is subject to the terms of the Mozilla Public
       - License, v. 2.0. If a copy of the MPL was not distributed with this
       - file, You can obtain one at https://mozilla.org/MPL/2.0/. -->
    <!-- Copyright © 1991-1998 Colton Software Limited
       - Copyright © 1998-2015 R W Colton -->

    <title>Statistical Functions</title>
    <link href="../help.css" rel="stylesheet" type="text/css">
</head>
<body>
    <h1 id="Statistical">Statistical Functions</h1>
    <p>
        The following statistical functions are provided by PipeDream 4.
        These functions operate on a range of cells or a list of several items.
        Note that a list can include a mix of individual values, cell references, ranges of cells, and arrays.
        There are examples of the statistical functions in the PipeDream 4 Examples.
    </p>

    <h2 class="csg-function" id="AVG">AVG</h2>
    <h5>Syntax:</h5>
    <p class="csg-function-declaration">AVG(<span class="csg-function-parameter">list</span>)</p>
    <p>Returns the arithmetic mean value of the <span class="csg-function-parameter">list</span>.</p>
    <p>Only numeric elements are evaluated so that blank cells do not upset averages.</p>

    <h2 class="csg-function" id="BETA">BETA</h2>
    <h5>Syntax:</h5>
    <p class="csg-function-declaration">
        BETA(<span class="csg-function-parameter">a</span>,
        <span class="csg-function-parameter">b</span>)
    </p>
    <p>Returns the value of the Beta function for arguments <span class="csg-function-parameter">a</span> and <span class="csg-function-parameter">b</span>.</p>
    <p>One definition of the Beta function is</p>
    <p class="csg-function-formula">
        <span class="csg-math-symbol csg-math-bigger">&Beta;</span>(<span class="csg-function-formula-variable">a</span>, <span class="csg-function-formula-variable">b</span>)
        &nbsp;=&nbsp;
        <span class="csg-math-symbol csg-math-bigger">&Gamma;</span>(<span class="csg-function-formula-variable">a</span>) &middot;
        <span class="csg-math-symbol csg-math-bigger">&Gamma;</span>(<span class="csg-function-formula-variable">b</span>) &divide;
        <span class="csg-math-symbol csg-math-bigger">&Gamma;</span>(<span class="csg-function-formula-variable">a</span> + <span class="csg-function-formula-variable">b</span>)
    </p>
    <p>This special function is actually evaluated by PipeDream using the formula</p>
    <p class="csg-function-formula">
        <span class="csg-math-symbol csg-math-bigger">&Beta;</span>(<span class="csg-function-formula-variable">a</span>, <span class="csg-function-formula-variable">b</span>)
        &nbsp;=&nbsp;
        exp(
        gammaln(<span class="csg-function-formula-variable">a</span>) +
        gammaln(<span class="csg-function-formula-variable">b</span>) -
        gammaln(<span class="csg-function-formula-variable">a</span> + <span class="csg-function-formula-variable">b</span>) )
    </p>

    <h2 class="csg-function" id="BIN">BIN</h2>
    <h5>Syntax:</h5>
    <p class="csg-function-declaration">
        BIN(<span class="csg-function-parameter">data</span>:<span class="csg-function-parameter-type">Array|Range</span>,
        <span class="csg-function-parameter">bins</span>:<span class="csg-function-parameter-type">Array|Range</span>)
    </p>
    <p>
        The <span class="csg-function-parameter">bins</span> array (or range of cells)
        defines a set of bins into which the values from the
        <span class="csg-function-parameter">data</span> array (or range of cells) is counted.
    </p>
    <p>
        For example, if <span class="csg-function-parameter">bins</span> is {20,40,60,80},
        the returned array gives the number of elements of
        <span class="csg-function-parameter">data</span> that have:
    </p>
    <ul style="list-style-type: none;">
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value &le;20</li>
        <li>20&lt; value &le;40</li>
        <li>40&lt; value &le;60</li>
        <li>60&lt; value &le;80</li>
        <li>80&lt; value </li>
    </ul>
    <p>
        The returned array will therefore always have one more element than the
        <span class="csg-function-parameter">bins</span> array (or range of cells).
        Neither data nor bins need be sorted.
    </p>
    <p>One common use of this function is to organise data for making a histogram.</p>
    <h5>Example:</h5>
    <p>
        With data in <code>A1A100</code>, and bin categories in <code>B1B5</code>,
        the following formula would provide the basis for a bar chart:
    </p>
    <pre class="csg-sample-indent">SET_VALUE(C1C6, BIN(A1A100, B1B5))</pre>
    <p>You would then make a bar chart from the range <code>B1C6</code>, using column B as labels.</p>
    <h5>Revisions:</h5>
    <p>This function was added in 4.50/39.</p>

    <h2 class="csg-function" id="COMBIN">COMBIN</h2>
    <h5>Syntax:</h5>
    <p class="csg-function-declaration">
        COMBIN(<span class="csg-function-parameter">n</span>,
        <span class="csg-function-parameter">k</span>)
    </p>
    <p>This function yields the number of combinations of <span class="csg-function-parameter">n</span> unlike things taken <span class="csg-function-parameter">k</span> at a time.</p>
    <p>The formula used is:</p>
    <p class="csg-function-formula">
        <sub class="csg-function-formula-variable">n</sub><span style="font-style: italic;">C</span><sub class="csg-function-formula-variable">k</sub>
        &nbsp;=&nbsp;
        <span class="csg-function-formula-variable">n</span>!
        &nbsp;&divide;&nbsp;
        (  (<span class="csg-function-formula-variable">n</span> - <span class="csg-function-formula-variable">k</span>)!
        &middot;
        <span class="csg-function-formula-variable">k</span>!
        )
    </p>
    <p>For very large <span class="csg-function-parameter">n</span> this is an approximation achieved using logarithms.</p>

    <h2 class="csg-function" id="COUNT">COUNT</h2>
    <h5>Syntax:</h5>
    <p class="csg-function-declaration">COUNT(<span class="csg-function-parameter">list</span>)</p>
    <p>Counts the number of numeric elements in the <span class="csg-function-parameter">list</span>.</p>

    <h2 class="csg-function" id="COUNTA">COUNTA</h2>
    <h5>Syntax:</h5>
    <p class="csg-function-declaration">COUNTA(<span class="csg-function-parameter">list</span>)</p>
    <p>Returns the number of all the values in the <span class="csg-function-parameter">list</span> regardless of their type.</p>

    <h5>Revisions:</h5>
    <p>This function was added in 4.54.</p>

    <h2 class="csg-function" id="GAMMALN">GAMMALN</h2>
    <h5>Syntax:</h5>
    <p class="csg-function-declaration">GAMMALN(<span class="csg-function-parameter">number</span>)</p>
    <p>This special function yields the natural logarithm of the gamma function of <span class="csg-function-parameter">number</span>.</p>

    <h2 class="csg-function" id="GRAND">GRAND</h2>
    <h5>Syntax:</h5>
    <p class="csg-function-declaration">
        GRAND{(<span class="csg-function-parameter">m</span>
        {, <span class="csg-function-parameter">s</span>)}}
    </p>
    <p>Returns a random number with gaussian distribution, mean <span class="csg-function-parameter">m</span> and standard deviation <span class="csg-function-parameter">s</span>.</p>
    <p>If <span class="csg-function-parameter">m</span> is not given, PipeDream assumes 0 (zero).</p><p>
    </p>
    <p>If <span class="csg-function-parameter">s</span> is not given, PipeDream assumes 1 (one).</p>

    <h2 class="csg-function" id="GROWTH">GROWTH</h2>
    <h5>Syntax:</h5>
    <p class="csg-function-declaration">
        GROWTH(<span class="csg-function-parameter">LOGEST_data</span>,
        <span class="csg-function-parameter">x_data</span>)
    </p>
    <p>
        Takes the result of the <span class="csg-function">LOGEST()</span> function (<span class="csg-function-parameter">LOGEST_data</span>)
        and applies it to <span class="csg-function-parameter">x_data</span>
        to return estimated <span class="csg-function-parameter">y_data</span>.
    </p>

    <h2 class="csg-function" id="LINEST">LINEST</h2>
    <h5>Syntax:</h5>
    <p class="csg-function-declaration">
        LINEST(<span class="csg-function-parameter">known_y’s</span>,
        <span class="csg-function-parameter">known_x’s</span>)
    </p>
    <p>
        Calculates the formula of the straight line which best fits your data
        (<span class="csg-function-parameter">known_y’s</span> and
        <span class="csg-function-parameter">known_x’s</span>) and returns an array.
    </p>

    <h3 id="Simple">Simple linear regression</h3>
    <p>The result is an array of 2 values giving {c,m} for the straight line fit</p>
    <p class="csg-function-formula">
        <span class="csg-function-formula-variable">y</span>
        &nbsp;=&nbsp;
        m&nbsp;<span class="csg-function-formula-variable">x</span>
        +
        c
    </p>
    <p>
        where the first array element, c, is the <em>y</em>-intercept value (i.e. where <em>x</em>=0) of the best-fitting straight line
        and the second array element, m, is the gradient of that line.
    </p>
    <h5>Example:</h5>
    <p>
        <span class="csg-function">LINEST()</span> is used to calculate the gradient and intercept of the best-fitting straight line through the data points.
        <span class="csg-function">INDEX()</span> is used to extract separate elements of the result array.
    </p>
    <table border="1" class="csg-sample-indent csg-sample">
        <col>
        <col>
        <col>
        <col>
        <col>
        <tbody>
            <tr>
                <th class="csg-sample-sheet-border-column"></th>
                <th class="csg-sample-sheet-border-column">A</th>
                <th class="csg-sample-sheet-border-column">B</th>
                <th class="csg-sample-sheet-border-column">C</th>
                <th class="csg-sample-sheet-border-column">D</th>
            </tr>
            <tr>
                <th class="csg-sample-sheet-border-row">1</th>
                <td class="csg-sample-sheet-cell-number">2.00</td>
                <td class="csg-sample-sheet-cell-number">4.00</td>
                <td class="csg-sample-sheet-cell-number">-2.00</td>
                <td>C1=linest(B1B5,A1A5)</td>
            </tr>
            <tr>
                <th class="csg-sample-sheet-border-row">2</th>
                <td class="csg-sample-sheet-cell-number">3.00</td>
                <td class="csg-sample-sheet-cell-number">7.00</td>
                <td class="csg-sample-sheet-cell-number">3.00</td>
                <td>C2=index(C1,2,1)</td>
            </tr>
            <tr>
                <th class="csg-sample-sheet-border-row">3</th>
                <td class="csg-sample-sheet-cell-number">5.00</td>
                <td class="csg-sample-sheet-cell-number">13.00</td>
                <td></td>
                <td></td>
            </tr>
            <tr>
                <th class="csg-sample-sheet-border-row">4</th>
                <td class="csg-sample-sheet-cell-number">7.00</td>
                <td class="csg-sample-sheet-cell-number">19.00</td>
                <td></td>
                <td></td>
            </tr>
            <tr>
                <th class="csg-sample-sheet-border-row">5</th>
                <td class="csg-sample-sheet-cell-number">&nbsp;10.00</td>
                <td class="csg-sample-sheet-cell-number">&nbsp;28.00</td>
                <td></td>
                <td></td>
            </tr>
        </tbody>
    </table>
    <p>To verify the results, a scatter chart of the data series can be drawn and a line of best fit may be specified to be drawn on the chart.</p>

    <h3 id="Multiple">Multiple linear regression</h3>
    <p>The result is an array of <span class="csg-function-formula-variable">m</span>+1 values, { <span>a<sub style="font-size: 70%;">0</sub>, a<sub style="font-size: 70%;">1</sub> &hellip; a<sub style="font-size: 70%;">m</sub></span> } such that</p>
    <p class="csg-function-formula">
        <em>y</em>
        &nbsp;=&nbsp;
        a<sub style="font-size: 70%;">0</sub>
        +
        <sub class="csg-function-formula-variable csg-math-symbol-limit-lower">i</sub><span class="csg-math-symbol-sum">&Sum;</span><sub class="csg-math-symbol-limit-lower">1</sub><sup class="csg-function-formula-variable csg-math-symbol-limit-upper">m</sup>
        (a<sub class="csg-function-formula-variable">i</sub> &middot; <span class="csg-function-formula-variable">x<sub>i</sub></span>)
    </p>
    <p>
        where the <span class="csg-function-formula-variable">x<sub>i</sub></span> are the
        independent <span class="csg-function-formula-variable">x</span> variables.
    </p>
    <h5>Example:</h5>
    <p>
        It is assumed that the value of a house is related to the garden size, number of bedrooms and distance from the city centre.
        Values for eight houses are known and these are used to calculate (in A10) an array of the coefficients.
    </p>
    <table border="1" class="csg-sample-indent csg-sample">
        <col>
        <col>
        <col>
        <col>
        <col>
        <col>
        <tbody>
            <tr>
                <th class="csg-sample-sheet-border-column"></th>
                <th class="csg-sample-sheet-border-column">A</th>
                <th class="csg-sample-sheet-border-column">B</th>
                <th class="csg-sample-sheet-border-column">C</th>
                <th class="csg-sample-sheet-border-column">D</th>
                <th class="csg-sample-sheet-border-column">E</th>
            </tr>
            <tr>
                <th class="csg-sample-sheet-border-row">1</th>
                <td class="csg-sample-sheet-cell-number">Garden m<sup>2</sup></td>
                <td class="csg-sample-sheet-cell-number">Bedrooms</td>
                <td class="csg-sample-sheet-cell-number">Distance</td>
                <td class="csg-sample-sheet-cell-number">Value</td>
                <td></td>
            </tr>
            <tr>
                <th class="csg-sample-sheet-border-row">2</th>
                <td class="csg-sample-sheet-cell-number">1600</td>
                <td class="csg-sample-sheet-cell-number">4</td>
                <td class="csg-sample-sheet-cell-number">4</td>
                <td class="csg-sample-sheet-cell-number">150000</td>
                <td></td>
            </tr>
            <tr>
                <th class="csg-sample-sheet-border-row">3</th>
                <td class="csg-sample-sheet-cell-number">450</td>
                <td class="csg-sample-sheet-cell-number">3</td>
                <td class="csg-sample-sheet-cell-number"></td>
                <td class="csg-sample-sheet-cell-number">67000</td>
                <td></td>
            </tr>
            <tr>
                <th class="csg-sample-sheet-border-row">4</th>
                <td class="csg-sample-sheet-cell-number">50</td>
                <td class="csg-sample-sheet-cell-number">2</td>
                <td class="csg-sample-sheet-cell-number">0.5</td>
                <td class="csg-sample-sheet-cell-number">55000</td>
                <td></td>
            </tr>
            <tr>
                <th class="csg-sample-sheet-border-row">5</th>
                <td class="csg-sample-sheet-cell-number">0</td>
                <td class="csg-sample-sheet-cell-number">2</td>
                <td class="csg-sample-sheet-cell-number">1</td>
                <td class="csg-sample-sheet-cell-number">45000</td>
                <td></td>
            </tr>
            <tr>
                <th class="csg-sample-sheet-border-row">6</th>
                <td class="csg-sample-sheet-cell-number">650</td>
                <td class="csg-sample-sheet-cell-number">4</td>
                <td class="csg-sample-sheet-cell-number">3</td>
                <td class="csg-sample-sheet-cell-number">100000</td>
                <td></td>
            </tr>
            <tr>
                <th class="csg-sample-sheet-border-row">7</th>
                <td class="csg-sample-sheet-cell-number">200</td>
                <td class="csg-sample-sheet-cell-number">1</td>
                <td class="csg-sample-sheet-cell-number">3.5</td>
                <td class="csg-sample-sheet-cell-number">58000</td>
                <td></td>
            </tr>
            <tr>
                <th class="csg-sample-sheet-border-row">8</th>
                <td class="csg-sample-sheet-cell-number">250</td>
                <td class="csg-sample-sheet-cell-number"></td>
                <td class="csg-sample-sheet-cell-number">4</td>
                <td class="csg-sample-sheet-cell-number">55000</td>
                <td></td>
            </tr>
            <tr>
                <th class="csg-sample-sheet-border-row">9</th>
                <td class="csg-sample-sheet-cell-number">620</td>
                <td class="csg-sample-sheet-cell-number">3</td>
                <td class="csg-sample-sheet-cell-number">2</td>
                <td class="csg-sample-sheet-cell-number">75000</td>
                <td></td>
            </tr>
            <tr>
                <th class="csg-sample-sheet-border-row">10</th>
                <td class="csg-sample-sheet-cell-number">40688</td>
                <td colspan="2">A10=linest(D2D9,A2C9)</td>
                <td></td>
                <td></td>
            </tr>
            <tr>
                <th class="csg-sample-sheet-border-row">11</th>
                <td class="csg-sample-sheet-cell-number">2</td>
                <td colspan="4">A11=set_value(A12C12,index(A10,2,1,3,1))</td>
            </tr>
            <tr>
                <th class="csg-sample-sheet-border-row">12</th>
                <td class="csg-sample-sheet-cell-number">62</td>
                <td class="csg-sample-sheet-cell-number">3021</td>
                <td class="csg-sample-sheet-cell-number">-956</td>
                <td></td>
                <td></td>
            </tr>
            <tr>
                <th class="csg-sample-sheet-border-row">13</th>
                <td class="csg-sample-sheet-cell-number"></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
            <tr>
                <th class="csg-sample-sheet-border-row">14</th>
                <td class="csg-sample-sheet-cell-number">600</td>
                <td class="csg-sample-sheet-cell-number">4</td>
                <td class="csg-sample-sheet-cell-number">2</td>
                <td class="csg-sample-sheet-cell-number">87949</td>
                <td>D14=trend(A10,A14C14)</td>
            </tr>
            <tr>
                <th class="csg-sample-sheet-border-row">15</th>
                <td></td>
                <td></td>
                <td></td>
                <td class="csg-sample-sheet-cell-number">87949</td>
                <td>D15=sum(A12C12*A14C14)+A10</td>
            </tr>
        </tbody>
    </table>
    <p>Expanding the array into the cells A12 to C12 shows the resulting formula to be</p>
    <p>Value = 40688 + 62*Garden + 3021*Bedrooms - 956*Distance</p>
    <p>
        This is then used to calculate a value for a house with a garden of 600 square metres, 4 bedrooms and 2 miles from the city centre.
        D14 and D15 show two ways of calculating the result.
    </p>

    <h2 class="csg-function" id="LISTCOUNT">LISTCOUNT</h2>
    <h5>Syntax:</h5>
    <p class="csg-function-declaration">LISTCOUNT(<span class="csg-function-parameter">array_or_range</span>)</p>
    <p>
        Returns a two-column array
        with the first column being a sorted list of unique entries from the first column of <span class="csg-function-parameter">array_or_range</span>,
        and the second column giving the number of occurrences of each entry.
    </p>
    <p>
        If <span class="csg-function-parameter">array_or_range</span> has two columns then
        the second column will be treated as a corresponding set of numbers to be added in to the total.
    </p>
    <h5>Example:</h5>
    <p>You have a list of customer names in column <code>A</code> and in column <code>C</code> you have a corresponding list of sales figures for individual sales to those customers, then</p>
    <p class="csg-sample-indent"><code>SET_VALUE(D1E20,LISTCOUNT({A1A100,C1C100}))</code></p>
    <p>would write out 20 rows of customers names and total sales figures in <code>D1E20</code>. <code>{A1A100,C1C100}</code> makes a two column array of 100 rows.</p>
    <p>You could use <span class="csg-function">SORT()</span> and <span class="csg-function">FLIP()</span> to sort the result of <span class="csg-function">LISTCOUNT()</span> into order before listing it out.</p>

    <h5>Revisions:</h5>
    <p>This function was added in 4.52/06.</p>

    <h2 class="csg-function" id="LOGEST">LOGEST</h2>
    <h5>Syntax:</h5>
    <p class="csg-function-declaration">
        LOGEST(<span class="csg-function-parameter">known_y’s</span>,
        <span class="csg-function-parameter">known_x’s</span>)
    </p>
    <p>Calculates an exponential curve which fits your data and returns an array which describes the curve.</p>
    <p>The equation for the curve is:</p>
    <p class="csg-function-formula">
        <span class="csg-function-formula-variable">y</span>
        =
        b &middot; (m<sup class="csg-function-formula-variable">x</sup>)
    </p>
    <p>or</p>
    <p class="csg-function-formula">
        <em>y</em>
        &nbsp;=&nbsp;
        a<sub style="font-size: 70%;">0</sub> &middot;
        <sub class="csg-function-formula-variable csg-math-symbol-limit-lower">i</sub><span class="csg-math-symbol-prod">&Product;</span><sub class="csg-math-symbol-limit-lower">1</sub><sup class="csg-function-formula-variable csg-math-symbol-limit-upper">m</sup>
        (a<sub class="csg-function-formula-variable">i</sub><sup class="csg-function-formula-variable">x<small>i</small></sup>)
    </p>
    <p>
        where the <span class="csg-function-formula-variable">x<sub>i</sub></span> are the
        independent <span class="csg-function-formula-variable">x</span> variables.
    </p>
    <p>This function is simply a logarithmic version of <span class="csg-function">LINEST()</span>.</p>

    <h2 class="csg-function" id="MAX">MAX</h2>
    <h5>Syntax:</h5>
    <p class="csg-function-declaration">MAX(<span class="csg-function-parameter">list</span>)</p>
    <p>Returns the maximum value in the <span class="csg-function-parameter">list</span>.</p>

    <h2 class="csg-function" id="MEDIAN">MEDIAN</h2>
    <h5>Syntax:</h5>
    <p class="csg-function-declaration">MEDIAN(<span class="csg-function-parameter">array_or_range</span>)</p>
    <p>Returns the median value in the array (or range or cells).</p>
    <p>If there are an even number of values in the array, the mean of the two middle values is returned.</p>
    <h5>Revisions:</h5>
    <p>This function was added in 4.50/39.</p>

    <h2 class="csg-function" id="MIN">MIN</h2>
    <h5>Syntax:</h5>
    <p class="csg-function-declaration">MIN(<span class="csg-function-parameter">list</span>)</p>
    <p>Returns the minimum value in the <span class="csg-function-parameter">list</span>.</p>

    <h2 class="csg-function" id="PERMUT">PERMUT</h2>
    <h5>Syntax:</h5>
    <p class="csg-function-declaration">
        PERMUT(<span class="csg-function-parameter">n</span>,
        <span class="csg-function-parameter">k</span>)
    </p>
    <p>This function yields the number of permutations of <span class="csg-function-parameter">n</span> unlike things taken <span class="csg-function-parameter">k</span> at a time.</p>
    <p>The formula used is:</p>
    <p class="csg-function-formula">
        <sub class="csg-function-formula-variable">n</sub><span style="font-style: italic;">P</span><sub class="csg-function-formula-variable">k</sub>
        &nbsp;=&nbsp;
        <span class="csg-function-formula-variable">n</span>!
        &nbsp;&divide;&nbsp;
        (<span class="csg-function-formula-variable">n</span> - <span class="csg-function-formula-variable">k</span>)!
    </p>
    <p>For very large <span class="csg-function-parameter">n</span> this is an approximation achieved using logarithms.</p>

    <h2 class="csg-function" id="RAND">RAND</h2>
    <h5>Syntax:</h5>
    <p class="csg-function-declaration">RAND</p>
    <p>Returns a random number in the range 0.0 to 1.0 from a sequence which is the same each time PipeDream starts.</p>
    <h5>Syntax:</h5>
    <p class="csg-function-declaration">RAND(<span class="csg-function-parameter">number</span>)</p>
    <p>Generates a random number in the range 0.0 to 1.0 using <span class="csg-function-parameter">number</span> as the initial seed.</p>
    <p><code>RAND(0)</code> generates a random number in the range 0.0 to 1.0 using a random seed.</p>

    <h2 class="csg-function" id="RANK">RANK</h2>
    <h5>Syntax:</h5>
    <p class="csg-function-declaration">
        RANK(<span class="csg-function-parameter">array_or_range</span>
        {, <span class="csg-function-parameter">spearflag</span>})
    </p>
    <p>
        Ranks the values contained in <span class="csg-function-parameter">array_or_range</span>,
        producing as an output an array with two columns {&nbsp;<em>rank</em>,&nbsp;<em>entries</em>&nbsp;}, where
    </p>
    <p><em>Rank</em> is the rank of each value (from highest to lowest).</p>
    <p><em>Entries</em> contains the number of entries of that value in the input array.</p>
    <p>
        If <span class="csg-function-parameter">spearflag</span> is present and is non-zero,
        equally ranked entries are adjusted so that the output is suitable for passing to the SPEARMAN() rank correlation function.
    </p>

    <h2 class="csg-function" id="SPEARMAN">SPEARMAN</h2>
    <h5>Syntax:</h5>
    <p class="csg-function-declaration">
        SPEARMAN(<span class="csg-function-parameter">array_or_range1</span>,
        <span class="csg-function-parameter">array_or_range2</span>)
    </p>
    <p>Returns the Spearman’s rank correlation coefficient for the two arrays (or ranges of cells).</p>
    <p>The input data can be taken from the <span class="csg-function">RANK()</span> function.</p>
    <p>The equation used is:</p>
    <p class="csg-function-formula">
        <i>r<sub>s</sub></i> =
        1 -
        <span class="csg-function-formula-outer-parentheses">(</span>
        6 &middot;
        <sub class="csg-function-formula-variable csg-math-symbol-limit-lower">i</sub><span class="csg-math-symbol-sum">&Sum;</span><sub class="csg-math-symbol-limit-lower">1</sub><sup class="csg-function-formula-variable csg-math-symbol-limit-upper">n</sup> <span class="csg-function-formula-variable">d<sub>i</sub></span><sup>2</sup>
        &nbsp;&divide;&nbsp;
        (<span class="csg-function-formula-variable">n</span> &middot; (<span class="csg-function-formula-variable">n</span><sup>2</sup> - 1))
        <span class="csg-function-formula-outer-parentheses">)</span>
    </p>

    <h2 class="csg-function" id="STD">STD</h2>
    <h5>Syntax:</h5>
    <p class="csg-function-declaration">STD(<span class="csg-function-parameter">list</span>)</p>
    <p>Returns the sample standard deviation of the values in the <span class="csg-function-parameter">list</span>.</p>
    <p>This is the square root of the sample variance.</p>
    <p>The equation used is:</p>
    <p class="csg-function-formula">
        &radic;<span class="csg-function-formula-outer-parentheses">{</span>
        <span class="csg-function-formula-outer-parentheses">(</span>
        <span class="csg-function-formula-variable">n</span> &middot;
        (<sub class="csg-function-formula-variable csg-math-symbol-limit-lower">i</sub><span class="csg-math-symbol-sum">&Sum;</span><sub class="csg-math-symbol-limit-lower">1</sub><sup class="csg-function-formula-variable csg-math-symbol-limit-upper">n</sup> (<span class="csg-function-formula-variable">x<sub>i</sub></span><sup>2</sup>))
        -
        (<sub class="csg-function-formula-variable csg-math-symbol-limit-lower">i</sub><span class="csg-math-symbol-sum">&Sum;</span><sub class="csg-math-symbol-limit-lower">1</sub><sup class="csg-function-formula-variable csg-math-symbol-limit-upper">n</sup> <span class="csg-function-formula-variable">x<sub>i</sub></span>)<sup>2</sup>
        <span class="csg-function-formula-outer-parentheses">)</span>
        &nbsp;&divide;&nbsp;
        (<span class="csg-function-formula-variable">n</span> &middot; (<span class="csg-function-formula-variable">n</span> - 1))
        <span class="csg-function-formula-outer-parentheses">}</span>
    </p>
    <p>
        where <span class="csg-function-formula-variable">x<sub>i</sub></span> is each value and
        <span class="csg-function-formula-variable">n</span> is the number of values
        in the <span class="csg-function-parameter">list</span>.
    </p>

    <h2 class="csg-function" id="STDP">STDP</h2>
    <h5>Syntax:</h5>
    <p class="csg-function-declaration">STDP(<span class="csg-function-parameter">list</span>)</p>
    <p>Returns the population standard deviation of the values in the <span class="csg-function-parameter">list</span>.</p>
    <p>This is the square root of the population variance.</p>
    <p>The equation used is:</p>
    <p class="csg-function-formula">
        &radic;<span class="csg-function-formula-outer-parentheses">{</span>
        <span class="csg-function-formula-outer-parentheses">(</span>
        <span class="csg-function-formula-variable">n</span> &middot;
        (<sub class="csg-function-formula-variable csg-math-symbol-limit-lower">i</sub><span class="csg-math-symbol-sum">&Sum;</span><sub class="csg-math-symbol-limit-lower">1</sub><sup class="csg-function-formula-variable csg-math-symbol-limit-upper">n</sup> (<span class="csg-function-formula-variable">x<sub>i</sub></span><sup>2</sup>))
        -
        (<sub class="csg-function-formula-variable csg-math-symbol-limit-lower">i</sub><span class="csg-math-symbol-sum">&Sum;</span><sub class="csg-math-symbol-limit-lower">1</sub><sup class="csg-function-formula-variable csg-math-symbol-limit-upper">n</sup> <span class="csg-function-formula-variable">x<sub>i</sub></span>)<sup>2</sup>
        <span class="csg-function-formula-outer-parentheses">)</span>
        &nbsp;&divide;&nbsp;
        <span class="csg-function-formula-variable">n</span><sup>2</sup>
        <span class="csg-function-formula-outer-parentheses">}</span>
    </p>
    <p>
        where <span class="csg-function-formula-variable">x<sub>i</sub></span> is each value and
        <span class="csg-function-formula-variable">n</span> is the number of values
        in the <span class="csg-function-parameter">list</span>.
    </p>

    <h2 class="csg-function" id="TREND">TREND</h2>
    <h5>Syntax:</h5>
    <p class="csg-function-declaration">
        TREND(<span class="csg-function-parameter">LINEST_data</span>,
        <span class="csg-function-parameter">x_data</span>)
    </p>
    <p>
        Takes the result of the <span class="csg-function">LINEST()</span> function (<span class="csg-function-parameter">LINEST_data</span>)
        and applies it to <span class="csg-function-parameter">x_data</span>
        to return estimated <span class="csg-function-parameter">y_data</span>.
    </p>

    <h2 class="csg-function" id="VAR">VAR</h2>
    <h5>Syntax:</h5>
    <p class="csg-function-declaration">
        VAR(<span class="csg-function-parameter">list</span>)
    </p>
    <p>Returns the sample variance of the values in the <span class="csg-function-parameter">list</span>.</p>
    <p>The equation used is:</p>
    <p class="csg-function-formula">
        <span class="csg-function-formula-outer-parentheses">(</span>
        <span class="csg-function-formula-variable">n</span> &middot;
        (<sub class="csg-function-formula-variable csg-math-symbol-limit-lower">i</sub><span class="csg-math-symbol-sum">&Sum;</span><sub class="csg-math-symbol-limit-lower">1</sub><sup class="csg-function-formula-variable csg-math-symbol-limit-upper">n</sup> (<span class="csg-function-formula-variable">x<sub>i</sub></span><sup>2</sup>))
        -
        (<sub class="csg-function-formula-variable csg-math-symbol-limit-lower">i</sub><span class="csg-math-symbol-sum">&Sum;</span><sub class="csg-math-symbol-limit-lower">1</sub><sup class="csg-function-formula-variable csg-math-symbol-limit-upper">n</sup> <span class="csg-function-formula-variable">x<sub>i</sub></span>)<sup>2</sup>
        <span class="csg-function-formula-outer-parentheses">)</span>
        &nbsp;&divide;&nbsp;
        (<span class="csg-function-formula-variable">n</span> &middot; (<span class="csg-function-formula-variable">n</span> - 1))
    </p>
    <p>
        where <span class="csg-function-formula-variable">x<sub>i</sub></span> is each value and
        <span class="csg-function-formula-variable">n</span> is the number of values
        in the <span class="csg-function-parameter">list</span>.
    </p>

    <h2 class="csg-function" id="VARP">VARP</h2>
    <h5>Syntax:</h5>
    <p class="csg-function-declaration">
        VARP(<span class="csg-function-parameter">list</span>)
    </p>
    <p>Returns the population variance of the values in the <span class="csg-function-parameter">list</span>.</p>
    <p>The equation used is:</p>
    <p class="csg-function-formula">
        <span class="csg-function-formula-outer-parentheses">(</span>
        <span class="csg-function-formula-variable">n</span> &middot;
        (<sub class="csg-function-formula-variable csg-math-symbol-limit-lower">i</sub><span class="csg-math-symbol-sum">&Sum;</span><sub class="csg-math-symbol-limit-lower">1</sub><sup class="csg-function-formula-variable csg-math-symbol-limit-upper">n</sup> (<span class="csg-function-formula-variable">x<sub>i</sub></span><sup>2</sup>))
        -
        (<sub class="csg-function-formula-variable csg-math-symbol-limit-lower">i</sub><span class="csg-math-symbol-sum">&Sum;</span><sub class="csg-math-symbol-limit-lower">1</sub><sup class="csg-function-formula-variable csg-math-symbol-limit-upper">n</sup> <span class="csg-function-formula-variable">x<sub>i</sub></span>)<sup>2</sup>
        <span class="csg-function-formula-outer-parentheses">)</span>
        &nbsp;&divide;&nbsp;
        <span class="csg-function-formula-variable">n</span><sup>2</sup>
    </p>
    <p>
        where <span class="csg-function-formula-variable">x<sub>i</sub></span> is each value and
        <span class="csg-function-formula-variable">n</span> is the number of values
        in the <span class="csg-function-parameter">list</span>.
    </p>
</body>
</html>
